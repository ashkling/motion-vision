function net = action_net_init(varargin)

opts.batchNormalization = true;
opts.networkType = 'simplenn' ;
opts = vl_argparse(opts, varargin) ;

%play with the learning rate. Increased it to make it learn more with this
%new data
lr = [.3 6] ;

% Define network action_net
net.layers = {} ;

% Block 1
%Creates new lacccccyers that takes into account the multiple CNNs funneling into
%the new portion
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(7,7,768,4096, 'single'), zeros(1, 4096, 'single')}}, ...
                           'learningRate', 0.3, ...
                           'stride', 1, ...
                           'pad', 2) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ;
net.layers{end+1} = struct('type', 'relu') ;

% Block 2
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.05*randn(5,5,4096,4096, 'single'), zeros(1,4096,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 2) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'avg', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ; % Emulate caffe

% Block 3
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.05*randn(5,5,4096,1000, 'single'), zeros(1,1000,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 2) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'avg', ...
                           'pool', [3 3], ...
                           'stride', 2, ...
                           'pad', [0 1 0 1]) ; % Emulate caffe
                       
% Block 4
net.layers{end+1} = struct('type','conv', ...
                           'weights', {{0.05*randn(27,30,1000,1000, 'single'), zeros(1,1000,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0);



% Loss layer
net.layers{end+1} = struct('type', 'softmaxloss') ;

% Meta parameters
net.meta.normalization.imageSize = [224 244 3 10] ;

% net.meta.trainOpts.learningRate = [0.05*ones(1,30) 0.005*ones(1,10) 0.0005*ones(1,5)] ;
% net.meta.trainOpts.weightDecay = 0.0001 ;
% net.meta.trainOpts.batchSize = 100 ;
% net.meta.trainOpts.numEpochs = numel(net.meta.trainOpts.learningRate) ;

% Fill in default values
net = vl_simplenn_tidy(net) ;

% % Switch to DagNN if requested
% switch lower(opts.networkType)
%   case 'simplenn'
%     % done
%   case 'dagnn'
%     net = dagnn.DagNN.fromSimpleNN(net, 'canonicalNames', true) ;
%     net.addLayer('error', dagnn.Loss('loss', 'classerror'), ...
%              {'prediction','label'}, 'error') ;
%   otherwise
%     assert(false) ;
end
